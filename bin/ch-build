#!/usr/bin/env ruby
# frozen_string_literal: true

require 'ch-build'
require 'colorize'
require 'pry'
require 'thor'

# rubocop:disable Metrics/AbcSize, Metrics/ClassLength
# CLI
class CHBuildCLI < Thor
  class_option :verbose, type: :boolean, aliases: '-v'
  class_option :force, type: :boolean, aliases: '-f'

  map %w(--version -V) => :__print_version
  desc '--version, -V', 'Current version'
  def __print_version
    puts CHBuild::VERSION
  end

  desc 'up', 'Build and run container'
  method_option :webroot, aliases: '-w', default: "#{Dir.pwd}/webroot", desc: 'Webroot volume path'
  method_option :initscripts, aliases: '-s', desc: 'Initscripts volume path'
  def up
    unless File.directory? options[:webroot]
      puts "Given webroot volume does not exit (#{options[:webroot]})".red
      exit 1
    end

    build
    runc
    if CHBuild::Controller.image_exist? && CHBuild::Controller.container_exist?
      puts 'Build environment up and running'.green
    end
  end

  desc 'build', 'Build the container image'
  def build
    if CHBuild::Controller.image_exist?
      if options[:force]
        puts "Delete '#{CHBuild::IMAGE_NAME}' Image".green
        CHBuild::Controller.delete_container
      else
        puts "Image '#{CHBuild::IMAGE_NAME}' already exists".green
        return
      end
    end
    if options[:verbose]
      CHBuild::Controller.build { |message| puts message }
    else
      start = Time.now
      CHBuild::Controller.build do |message|
        message.match(/step \d{1,2}/i) do |match|
          num = match.to_s.split[1].to_i
          step = '['.green + "#{(Time.now - start).round(2)}s".rjust(6) + ']'.green
          text = "Building your image#{'.' * num}".green
          print "#{step} #{text}\r"
          $stdout.flush
        end
      end
    end
    print "\n"
    $stdout.flush
    puts 'Docker image building successful'.green
  end

  desc 'runc', 'Create and start the container'
  method_option :webroot, aliases: '-w', default: "#{Dir.pwd}/webroot", desc: 'Webroot volume path'
  method_option :initscripts, aliases: '-s', desc: 'Initscripts volume path'
  def runc
    unless File.directory? options[:webroot]
      puts "Given webroot volume does not exit (#{options[:webroot]})".red
      exit 1
    end

    if CHBuild::Controller.container_exist?
      if !options[:force]
        puts 'Container already exists. Run this command again with the ' \
             '\'--force\' option to delete it and create a new one'.red
        return
      else
        CHBuild::Controller.delete_container
      end
    end
    unless CHBuild::Controller.run(webroot: options[:webroot], initscripts: options[:initscripts])
      puts 'Could not start container :('.red
      exit 1
    end
    puts 'Container started'.green
  end

  desc 'clean', 'Clean build environment'
  def clean
    CHBuild::Controller.clean do |deleted|
      puts "Deleted #{deleted}...".green
    end
    puts 'Build environment is clean'.green
  end

  desc 'promote', 'Promote current build'
  def promote
    CHBuild::Controller.promote
  end

  desc 'validate', 'Validate build definition file'
  method_option :file,
                aliases: '-f',
                default: File.join(Dir.pwd, '.ch-build.yml'),
                desc: 'Build definition file path'
  def validate
    config = CHBuild::Controller.config(options[:file])

    puts "Config path: #{config.path}".green

    if options[:verbose]
      puts 'Config from file:'
      Pry::ColorPrinter.pp config.raw
      puts 'Final config:'
      Pry::ColorPrinter.pp config
    end

    if config.errors.length.zero?
      puts 'Looks good'.green
      return
    end

    puts "Errors:\n".red
    config.errors.each do |err|
      puts err.red
    end
    exit 1
>>>>>>> Base YAML parsing and validation
  end
end

CHBuildCLI.start(ARGV)
