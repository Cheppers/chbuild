#!/usr/bin/env ruby
# frozen_string_literal: true

require 'ch-build'
require 'colorize'
require 'pp'
require 'thor'

# rubocop:disable Metrics/AbcSize

# CLI
class CHBuildCLI < Thor
  class_option :verbose, type: :boolean, aliases: '-v'
  class_option :force, type: :boolean, aliases: '-f'

  map %w(--version -v) => :__print_version
  desc '--version, -v', 'Current version'
  def __print_version
    puts CHBuild::VERSION
  end

  desc 'up', 'Build and run container'
  def up
    build
    runc
    if CHBuild::Controller.image_exist? && CHBuild::Controller.container_exist?
      puts 'Build environment up and running'.green
    end
  end

  desc 'build', 'Build the container image'
  def build
    if CHBuild::Controller.image_exist?
      puts "Image '#{CHBuild::IMAGE_NAME}' already exists".green
      return
    end
    if options[:verbose]
      CHBuild::Controller.build { |message| puts message }
    else
      start = Time.now
      CHBuild::Controller.build do |message|
        message.match(/step \d{1,2}/i) do |match|
          num = match.to_s.split[1].to_i
          step = '['.green + "#{(Time.now - start).round(2)}s".rjust(6) + ']'.green
          text = "Building your image#{'.' * num}".green
          print "#{step} #{text}\r"
          $stdout.flush
        end
      end
    end
    print "\n"
    $stdout.flush
    puts 'Docker image building successful'.green
  end

  desc 'runc', 'Create and start the container'
  def runc
    if CHBuild::Controller.container_exist? # && !options[:force]
      puts 'Container already exists. Run this command again with the ' \
           '\'--force\' option to delete it and create a new one'.red
      return
    end
    unless CHBuild::Controller.run
      puts 'Could not start container :('.red
      exit 1
    end
    puts 'Container started'.green
  end

  desc 'clean', 'Clean build environment'
  def clean
    CHBuild::Controller.clean do |deleted|
      puts "Deleted #{deleted}...".green
    end
    puts 'Build environment is clean'.green
  end
end

CHBuildCLI.start(ARGV)
