#!/usr/bin/env ruby
# frozen_string_literal: true

require 'contur'
require 'colorize'
require 'pp'
require 'thor'

# rubocop:disable Metrics/AbcSize, Metrics/ClassLength
# Contur CLI
class ConturCLI < Thor
  no_commands do # rubocop:disable Metrics/BlockLength
    def build_image(options: {})
      if Contur::Controller.image_exist?
        puts 'Image already exists, skipping image build' if options[:verbose]
        return
      end
      if options[:verbose]
        Contur::Controller.build { |message| puts message }
      else
        start = Time.now
        Contur::Controller.build do |message|
          message.match(/step \d{1,2}/i) do |match|
            num = match.to_s.split[1].to_i
            step = '['.green + "#{(Time.now - start).round(2)}s".rjust(6) + ']'.green
            text = "Building your image#{'.' * num}".green
            print "#{step} #{text}\r"
            $stdout.flush
          end
        end
      end
      print "\n"
      $stdout.flush
      puts 'Image build successfully'.green
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/PerceivedComplexity
    def run_container(restart: false, options: {})
      if (c = Contur::Controller.container?) && restart
        Contur::Controller.delete_container
        puts 'Container killed and deleted'.green
      elsif c
        puts "Container already exists, run 'contur restart' to relaunch it" if options[:verbose]
        return
      end

      controller_run = Contur::Controller.run(webroot: Dir.pwd) do |log|
        puts log if options[:verbose]
      end

      unless controller_run
        puts 'Could not start container :('.red
        exit 1
      end

      puts 'Container started'.green
      puts "Container id: #{Contur::Controller.container_id}" if options[:verbose]
    end

    def delete_mysql_containers
      if Contur::Controller.delete_mysql_containers
        'MySQL container(s) killed and deleted'.green
      else
        'MySQL container(s) not found'.yellow
      end
    end

    def delete_image
      if Contur::Controller.delete_image
        'Image deleted'.green
      else
        'Image not found'.yellow
      end
    end

    def delete_container
      if Contur::Controller.delete_container
        'Container killed'.green
      else
        'Container not found'.yellow
      end
    end
  end

  class_option :verbose, type: :boolean, aliases: '-v'
  class_option :force, type: :boolean, aliases: '-f'

  map %w(--version -V) => :__print_version
  desc '--version, -V', 'Current version'
  def __print_version
    puts Contur::VERSION
  end

  desc 'start', 'Build and start everything'
  def start
    build_image(options: options)

    run_container(options: options)

    puts "Build environment up and running; run 'contur restart' to relaunch container".green
  end

  desc 'restart', 'Restart Contur container'
  def restart
    build_image(options: options)

    run_container(restart: true, options: options)

    puts "Build environment up and running; run 'contur restart' to relaunch container".green
  end

  desc 'log', 'Get container log'
  def log
    puts Contur::Controller.container_logs
  end

  desc 'delete [-C] [-I] [-M]', 'Delete container, image or MySQL container(s)'
  method_option :container, aliases: '-C', type: :boolean, default: false, desc: 'Delete container'
  method_option :image, aliases: '-I', type: :boolean, default: false, desc: 'Delete image'
  method_option 'mysql-container',
                aliases: '-M',
                type: :boolean,
                default: false,
                desc: 'Delete MySQL container(s)'
  def delete
    puts delete_container if options[:container]

    puts delete_image if options[:image]

    puts delete_mysql_containers if options['mysql-container']

  rescue => e
    puts e.message.red
    exit 1
  end

  desc 'validate', 'Validate build definition file'
  method_option :path,
                aliases: '-p',
                default: File.join(Dir.pwd, '.contur.yml'),
                desc: 'Build definition file path'
  def validate
    begin
      config = Contur::Controller.config(options[:path])
    rescue Contur::Config::NotFoundError => e
      puts "ERROR: #{e.message}".red
      exit 1
    end

    puts "Config path: #{config.path}".green

    if options[:verbose]
      puts 'Config from file:'.yellow
      pp config.raw
      puts 'Final config:'.yellow
      pp config
    end

    if config.errors.length.zero?
      puts 'Looks good'.green
      return
    end

    puts "Errors:\n".red
    config.errors.each do |err|
      puts err.red
    end
    exit 1
  end
end

ConturCLI.start(ARGV)
